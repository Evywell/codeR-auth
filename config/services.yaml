# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    opensslPrivateKeysPath: '%env(resolve:OPENSSL_PRIVATE_KEYS_PATH)%'
    opensslPublicKeysPath: '%env(resolve:OPENSSL_PUBLIC_KEYS_PATH)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Database/Entity/'
            - '../src/Database/migrations'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    App\Services\JWTTokenManager:
        class: App\Services\JWTTokenManager
        autowire: true
        arguments:
            $ttl: '%env(resolve:JWT_TOKEN_TTL)%'
            $baseUrl: '%env(APP_URL)%'
            $opensslPrivateKeysPath: '%opensslPrivateKeysPath%'

    App\Services\Tickets\TicketService:
        class: App\Services\Tickets\TicketService
        autowire: true
        arguments:
            $passphrase: '%env(JWT_PASSPHRASE)%'

    app.event.jwt_created_listener:
        class: App\Event\JWT\JWTCreatedListener
        autowire: true
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }
